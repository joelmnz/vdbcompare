<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /wDAAJAAAABoAAAHqgAAP/8AAD8xABB/kAA=
</value>
  </data>
</root>